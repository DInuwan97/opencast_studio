{"version":3,"sources":["util.js","settings.js","opencast.js","style/global-style.js","theme.js","i18n/index.js","serviceWorker.js","index.js"],"names":["onMobileDevice","test","navigator","platform","userAgent","isDisplayCaptureSupported","mediaDevices","isUserCaptureSupported","isRecordingSupported","MediaRecorder","onSafari","dimensionsOf","stream","width","height","getVideoTracks","getSettings","recordingFileName","mime","flavor","title","presenter","titlePart","substring","presenterPart","nowAsString","lowerMime","toLowerCase","startsWith","mimeToExt","pad2","n","now","Date","getFullYear","getMonth","getDate","getHours","getMinutes","userHasWebcam","async","enumerateDevices","some","d","kind","decodeHexString","hex","length","SyntaxError","digitToNum","digit","charCodeAt","RangeError","bytes","Uint8Array","i","TextDecoder","decode","sleep","ms","Promise","resolve","reject","setTimeout","queryMediaDevices","dispatch","type","payload","getUniqueDevices","allDevices","out","od","deviceId","push","FORM_FIELD_HIDDEN","FORM_FIELD_OPTIONAL","FORM_FIELD_REQUIRED","SettingsManager","constructor","values","contextSettings","urlSettings","onChange","this","userSettings","self","stored","window","localStorage","getItem","rawUserSettings","JSON","parse","console","warn","validate","SRC_LOCAL_STORAGE","rawContextSettings","loadContextSettings","SRC_SERVER","urlParams","URLSearchParams","location","search","get","encoded","decoded","e","rawUrlSettings","parseToml","key","keys","SRC_URL","value","obj","segments","split","slice","forEach","segment","basepath","endsWith","settingsPath","process","REACT_APP_SETTINGS_PATH","base","url","origin","response","fetch","status","debug","ok","error","statusText","headers","text","saveSettings","newSettings","merge","setItem","stringify","settings","all","formValues","defaultSettings","fixedSettings","isConfigurable","path","isUsernameConfigurable","opencast","loginProvided","isPasswordConfigurable","allowParse","src","sourceDescription","schema","validateValue","validateObj","validation","newValue","undefined","Object","newPath","SCHEMA","serverUrl","loginName","loginPassword","types","v","Error","Number","isInteger","positiveInteger","int","elementType","Array","isArray","map","element","err","metaDataField","includes","string","URL","protocol","boolean","upload","seriesId","workflowId","acl","dcc","titleField","presenterField","recording","videoBitrate","mimes","array","review","disableCutting","display","maxFps","maxHeight","camera","return","allowedDomains","inner","label","target","a","b","deepmerge","arrayMerge","destinationArray","sourceArray","options","Context","React","createContext","useSettings","useContext","Provider","settingsManager","children","updateSettings","useState","useEffect","STATE_UNCONFIGURED","STATE_CONNECTED","STATE_LOGGED_IN","STATE_NETWORK_ERROR","STATE_RESPONSE_NOT_OK","STATE_INVALID_RESPONSE","STATE_INCORRECT_LOGIN","UPLOAD_SUCCESS","UPLOAD_NETWORK_ERROR","UPLOAD_NOT_AUTHORIZED","UPLOAD_UNEXPECTED_RESPONSE","Opencast","updateGlobalOc","username","password","updateUser","setGlobalInstance","newInstance","newUser","getInfoMe","RequestError","oldState","NetworkError","Unauthorized","NotOkResponse","UnexpectedRedirect","InvalidJson","hasChanged","ltiSession","userChanged","equal","user","newLtiSession","getLti","ltiChanged","jsonRequest","request","json","btoa","unescape","encodeURIComponent","credentials","redirect","recordings","start","end","uploadSettings","onProgress","refreshConnection","mediaPackage","then","addDcCatalog","attachAcl","uploadTracks","addCuttingInformation","MAX_VALUE","finishIngest","template","DEFAULT_DCC_TEMPLATE","constructDcc","body","FormData","append","method","DEFAULT_ACL_TEMPLATE","constructAcl","Blob","smil","totalBytes","r","media","size","reduce","finishedTracksBytes","deviceType","mimeType","finishedBytes","trackFlavor","downloadName","xhr","XMLHttpRequest","open","setRequestHeader","onload","responseText","onerror","onprogress","totalLoaded","loaded","send","getState","isLoginProvided","isReadyToUpload","prettyServerUrl","hostname","view","lti","roleOAuthUser","roles","find","renderTemplate","toISOString","cause","super","useOpencast","initial","updateDummy","updateOpencast","old","interval","setInterval","clearInterval","escapeString","s","XMLSerializer","serializeToString","Text","originalEscape","Mustache","escape","render","GlobalStyle","heading","color","fontFamily","lineHeight","fontWeight","baseButton","fontSize","mr","bg","borderColor","borderWidth","borderStyle","cursor","opacity","breakpoints","space","fonts","monospace","fontSizes","fontWeights","bold","lineHeights","heights","headerHeight","colors","background","primary","secondary","muted","highlight","gray","videoOverlay","buttons","darken","danger","border","theme","cards","boxShadow","maxWidth","position","styles","root","h1","mt","mb","h2","h3","h4","h5","h6","p","pre","overflowX","code","table","borderCollapse","borderSpacing","th","textAlign","borderBottomStyle","td","img","input","borderRadius","px","py","outline","transition","select","progress","container","mx","resources","en","translation","de","el","es","fa","fr","nl","sl","tr","i18n","use","initReactI18next","LanguageDetector","init","fallbackLng","keySeparator","interpolation","escapeValue","format","lng","seconds","minutes","Math","floor","hours","secondsString","toLocaleString","minimumFractionDigits","maximumFractionDigits","result","unshift","join","detection","order","Boolean","match","REACT_APP_ENABLE_SENTRY","Sentry","dsn","release","initialize","mod","default","oc","race","ReactDOM","document","getElementById","App","StrictMode","message","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.2162897b.chunk.js","sourcesContent":["// Checks if we app is running on a mobile device.\n//\n// This check could be more exhaustive, but this includes all browser we\n// officially support.\nexport const onMobileDevice = () =>\n  /Android|iPhone|iPad|iPod/i.test(navigator.platform) ||\n  /Android/i.test(navigator.userAgent);\n\n// Checks if the client supports capturing the device's display (or individual\n// windows).\n//\n// Detecting whether display capture is supported is hard. There is currently\n// no proper solution. See these two links for more information:\n// - https://stackoverflow.com/q/58842831/2408867\n// - https://github.com/w3c/mediacapture-screen-share/issues/127\n//\n// To work around this problem, we simply check if the browser runs on a\n// mobile device. Currently, no mobile device/browser supports display\n// capture. However, this will probably change in the future, so we have to\n// revisit this issue again. This is tracked in this issue:\n// https://github.com/elan-ev/opencast-studio/issues/204\nexport const isDisplayCaptureSupported = () =>\n  \"mediaDevices\" in navigator &&\n  \"getDisplayMedia\" in navigator.mediaDevices &&\n  !onMobileDevice();\n\n// Checks if the client supports capturing \"user devices\" (usually webcams or\n// phone cameras).\nexport const isUserCaptureSupported = () =>\n  'mediaDevices' in navigator && 'getUserMedia' in navigator.mediaDevices;\n\n// Checks if the browsers supports the `MediaRecorder` API required to actually\n// record the media streams.\nexport const isRecordingSupported = () => typeof MediaRecorder !== 'undefined';\n\n// Checks if this runs in Safari. Check from https://stackoverflow.com/a/23522755/\nexport const onSafari = () => /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n\n// Returns the dimensions as [w, h] array or `null` if there is no video track.\nexport const dimensionsOf = stream => {\n  const { width, height } = stream?.getVideoTracks()?.[0]?.getSettings() ?? {};\n  return [width, height];\n};\n\n// Converts the MIME type into a file extension.\nexport const mimeToExt = mime => {\n  if (mime) {\n    const lowerMime = mime.toLowerCase();\n    if (lowerMime.startsWith(\"video/webm\")) {\n      return \"webm\";\n    }\n    if (lowerMime.startsWith(\"video/mp4\")) {\n      return \"mp4\";\n    }\n    if (lowerMime.startsWith(\"video/x-matroska\")) {\n      return \"mkv\";\n    }\n    if (lowerMime.startsWith(\"video/avi\")) {\n      return \"avi\";\n    }\n    if (lowerMime.startsWith(\"video/quicktime\")) {\n      return \"mov\";\n    }\n  }\n\n  // If we know nothing, our best guess is webm; except for Safari which does\n  // not understand webm: there it's mp4.\n  return onSafari() ? \"mp4\" : \"webm\";\n};\n\n// Returns a suitable filename for a recording with the MIME type `mime` and the\n// given `flavor`. The latter should be either `presenter` or `presentation`.\n// `mime` can be null or a string and is converted to a file extension on a best\n// effort basis.\nexport const recordingFileName = ({ mime, flavor, title, presenter }) => {\n  const titlePart = (title ? ` - ${title}` : '').substring(0, 50);\n  const presenterPart = (presenter ? ` - ${presenter}` : '').substring(0, 50);\n  return `${nowAsString()}${titlePart}${presenterPart} (${flavor}, OC Studio).${mimeToExt(mime)}`;\n};\n\nconst nowAsString = () => {\n  const pad2 = n => (n >= 10 ? '' : '0') + n;\n\n  const now = new Date();\n  return ''\n    + now.getFullYear() + '-'\n    + pad2(now.getMonth() + 1) + '-'\n    + pad2(now.getDate()) + ' '\n    + pad2(now.getHours()) + '-'\n    + pad2(now.getMinutes());\n};\n\nexport const userHasWebcam = async () => {\n  if (!('mediaDevices' in navigator)) {\n    return false;\n  }\n\n  const devices = await navigator.mediaDevices.enumerateDevices();\n  return devices.some(d => d.kind === 'videoinput');\n};\n\n// Decodes the given hex string into a new string. If the given string contains\n// characters that are not hexadecimal digits or if the string's length is odd,\n// this function will throw an exception.\nexport const decodeHexString = hex => {\n  if (hex.length % 2 !== 0) {\n    throw new SyntaxError('hex string does not have an even length');\n  }\n\n  const digitToNum = digit => {\n    if (digit >= '0' && digit <= '9') {\n      return digit.charCodeAt(0) - '0'.charCodeAt(0);\n    } else if (digit >= 'a' && digit <= 'f') {\n      return digit.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    } else if (digit >= 'A' && digit <= 'F') {\n      return digit.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    } else {\n      throw new RangeError(`invalid hex digit '${digit}'`);\n    }\n  };\n\n  let bytes = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < hex.length; i += 2) {\n    bytes[i / 2] = 16 * digitToNum(hex.substring(i, i + 1))\n      + digitToNum(hex.substring(i + 1, i + 2));\n  }\n\n  return new TextDecoder().decode(bytes);\n};\n\n// Returns a promise that resolves after `ms` milliseconds.\nexport const sleep = ms => new Promise((resolve, reject) => setTimeout(resolve, ms));\n\n// Obtains all media devices and stores them into the global state.\nexport const queryMediaDevices = async (dispatch) => {\n  const devices = await navigator.mediaDevices.enumerateDevices();\n  dispatch({ type: 'UPDATE_MEDIA_DEVICES', payload: devices });\n};\n\n// Filters the `allDevices` array such that only devices with the given `kind`\n// are included and no two devices have the same `deviceId`.\nexport const getUniqueDevices = (allDevices, kind) => {\n  let out = [];\n  for (const d of allDevices) {\n    // Only interested in one kind of device.\n    if (d.kind !== kind) {\n      continue;\n    }\n\n    // If we already have a device with that device ID, we ignore it.\n    if (out.some(od => od.deviceId === d.deviceId)) {\n      continue;\n    }\n\n    out.push(d);\n  }\n\n  return out;\n};\n","//; -*- mode: rjsx;-*-\n/** @jsx jsx */\nimport { jsx } from 'theme-ui';\nimport React, { useEffect, useState } from 'react';\nimport deepmerge from 'deepmerge';\nimport parseToml from '@iarna/toml/parse-string';\nimport { decodeHexString } from './util';\n\n\nconst LOCAL_STORAGE_KEY = 'ocStudioSettings';\nconst CONTEXT_SETTINGS_FILE = 'settings.toml';\n\nexport const FORM_FIELD_HIDDEN = 'hidden';\nexport const FORM_FIELD_OPTIONAL = 'optional';\nexport const FORM_FIELD_REQUIRED = 'required';\n\n// Responsible for obtaining settings from different places (context settings,\n// local storage, query parameter) and merging them appropriately.\nexport class SettingsManager {\n  // The settings set by the server. These cannot be edited by the user. If the\n  // server did not specify any settings, this is `{}`.\n  contextSettings = {};\n\n  // These settings are given in the query part of the URL (e.g.\n  // `?opencast.loginName=peter`). If there are no settings in the URL, this\n  // is `{}`.\n  urlSettings = {};\n\n  // The settings set by the user and stored in local storage. This is `{}` if\n  // there were no settings in local storage.\n  #userSettings = {};\n\n  // This function is called whenever the user saved their settings. The new\n  // settings object is passed as parameter.\n  onChange = null;\n\n  // This constructor is mainly used for tests. Use `init()` to get an instance\n  // for the real application.\n  constructor(values) {\n    if (values) {\n      if (values.contextSettings) {\n        this.contextSettings = values.contextSettings;\n      }\n      if (values.urlSettings) {\n        this.urlSettings = values.urlSettings;\n      }\n      if (values.userSettings) {\n        this.#userSettings = values.userSettings;\n      }\n    }\n  }\n\n  // Creates a new `Settings` instance by loading user settings from local\n  // storage and attempting to load context settings from the server..\n  static async init() {\n    let self = new SettingsManager();\n\n    // Load the user settings from local storage\n    const stored = window.localStorage.getItem(LOCAL_STORAGE_KEY);\n    if (stored !== null) {\n      let rawUserSettings;\n      try {\n        rawUserSettings = JSON.parse(stored);\n      } catch {\n        console.warn(\"Could not parse settings stored in local storage. Ignoring.\");\n      }\n      self.#userSettings = self.validate(\n        rawUserSettings,\n        false,\n        SRC_LOCAL_STORAGE,\n        'from local storage user settings',\n      );\n    }\n\n    const rawContextSettings = await SettingsManager.loadContextSettings() || {};\n    self.contextSettings = self.validate(\n      rawContextSettings,\n      false,\n      SRC_SERVER,\n      'from server settings file',\n    );\n\n    // Get settings from URL query.\n    const urlParams = new URLSearchParams(window.location.search);\n\n    if (urlParams.get('config')) {\n      // In this case, the GET parameter `config` is specified. We now expect a\n      // hex encoded TOML file describing the configuration. This is possible in\n      // cases where special characters in GET parameters might get modified\n      // somehow (e.g. by an LMS). A config=hexstring only uses the most basic\n      // characters, so it should always work.\n\n      const encoded = urlParams.get('config');\n      let decoded;\n      try {\n        decoded = decodeHexString(encoded);\n      } catch (e) {\n        console.warn(\n          `Could not decode hex-encoded string given to GET parameter 'config'. Ignoring. Error:`,\n          e,\n        );\n      }\n\n      let rawUrlSettings = {};\n      try {\n        rawUrlSettings = parseToml(decoded);\n      } catch (e) {\n        console.warn(\n          `Could not parse (as TOML) decoded hex-string given to GET parameter 'config'. `\n            + `Ignoring. Error:`,\n          e,\n        );\n      }\n\n      for (const key of urlParams.keys()) {\n        if (key !== 'config') {\n          console.warn(\n            `URL GET parameter '${key}' is ignored as 'config' is specified. Either specify `\n            + ` all configuration via the 'config' GET parameter hex string or via direct GET `\n            + `parameters. Mixing is not allowed.`\n          );\n        }\n      }\n\n      self.urlSettings = self.validate(\n        rawUrlSettings,\n        false,\n        SRC_URL,\n        'given as URL `config` GET parameter',\n      );\n    } else {\n      // Interpret each get parameter as single configuration value.\n      let rawUrlSettings = {};\n      for (let [key, value] of urlParams) {\n        // Create empty objects for full path (if the key contains '.') and set\n        // the value at the end.\n        let obj = rawUrlSettings;\n        const segments = key.split('.');\n        segments.slice(0, -1).forEach((segment) => {\n          if (!(segment in obj)) {\n            obj[segment] = {};\n          }\n          obj = obj[segment];\n        });\n        obj[segments[segments.length - 1]] = value;\n      }\n\n      self.urlSettings = self.validate(rawUrlSettings, true, SRC_URL, 'given as URL GET parameter');\n    }\n\n    return self;\n  }\n\n  // Attempts to load `settings.toml` (or REACT_APP_SETTINGS_PATH is that's\n  // specified) from the server. If it fails for some reason, returns `null` and\n  // prints an appropriate message on console.\n  static async loadContextSettings() {\n    // Try to retrieve the context settings.\n    let basepath = process.env.PUBLIC_URL || '/';\n    if (!basepath.endsWith('/')) {\n      basepath += '/';\n    }\n\n    // Construct path to settings file. If the `REACT_APP_SETTINGS_PATH` is\n    // given and starts with '/', it is interpreted as absolute path from the\n    // server root.\n    const settingsPath = process.env.REACT_APP_SETTINGS_PATH || CONTEXT_SETTINGS_FILE;\n    const base = settingsPath.startsWith('/') ? '' : basepath;\n    const url = `${window.location.origin}${base}${settingsPath}`;\n    let response;\n    try {\n      response = await fetch(url);\n    } catch (e) {\n      console.warn(`Could not access '${settingsPath}' due to network error!`, e || \"\");\n      return null;\n    }\n\n    if (response.status === 404) {\n      // If the settings file was not found, we silently ignore the error. We\n      // expect many installation to provide this file.\n      console.debug(`'${settingsPath}' returned 404: ignoring`);\n      return null;\n    } else if (!response.ok) {\n      console.error(\n        `Fetching '${settingsPath}' failed: ${response.status} ${response.statusText}`\n      );\n      return null;\n    }\n\n    if (response.headers.get('Content-Type')?.startsWith('text/html')) {\n      console.warn(`'${settingsPath}' request has 'Content-Type: text/html' -> ignoring...`);\n      return null;\n    }\n\n    try {\n      return parseToml(await response.text());\n    } catch (e) {\n      console.error(`Could not parse '${settingsPath}' as TOML: `, e);\n      throw new SyntaxError(`Could not parse '${settingsPath}' as TOML: ${e}`);\n    }\n  }\n\n  // Stores the given `newSettings` as user settings. The given object might be\n  // partial, i.e. only the new values can be specified. Values in `newSettings`\n  // override values in the old user settings.\n  saveSettings(newSettings) {\n    this.#userSettings = merge(this.#userSettings, newSettings);\n    window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(this.#userSettings));\n    if (this.onChange) {\n      this.onChange(this.settings());\n    }\n  }\n\n  // The merged settings that the whole application should use.\n  settings() {\n    return merge.all([this.#userSettings, this.contextSettings, this.urlSettings]);\n  }\n\n  // The values for the settings forms. These are simply the user settings with\n  // missing settings filled by `defaultSettings`.\n  formValues() {\n    return merge(defaultSettings, this.#userSettings);\n  }\n\n  fixedSettings() {\n    return merge(this.contextSettings, this.urlSettings);\n  }\n\n  // Returns whether a specific setting is configurable by the user. It is not\n  // if the setting is fixed by the context setting or an URL setting. The path\n  // is given as string. Example: `manager.isConfigurable('opencast.loginName')`\n  isConfigurable(path) {\n    let obj = this.fixedSettings();\n    const segments = path.split('.');\n    for (const segment of segments) {\n      if (!(segment in obj)) {\n        return true;\n      }\n      obj = obj[segment];\n    }\n\n    return false;\n  }\n\n  isUsernameConfigurable() {\n    return this.isConfigurable('opencast.loginName')\n      && this.fixedSettings().opencast?.loginProvided !== true;\n  }\n  isPasswordConfigurable() {\n    return this.isConfigurable('opencast.loginPassword')\n      && this.fixedSettings().opencast?.loginProvided !== true;\n  }\n\n  // Validate the given `obj` with the global settings `SCHEMA`. If `allowParse`\n  // is true, string values are attempted to parse into the expected type. `src`\n  // must be one of `SRC_SERVER`, `SRC_URL` or `SRC_LOCAL_STORAGE`.\n  // `srcDescription` is just a string for error messages specifying where `obj`\n  // comes from.\n  validate(obj, allowParse, src, sourceDescription) {\n    // Validates `obj` with `schema`. `path` is the current path used for error\n    // messages.\n    const validate = (schema, obj, path) => {\n      if (typeof schema === 'function') {\n        return validateValue(schema, obj, path);\n      } else {\n        return validateObj(schema, obj, path);\n      }\n    };\n\n    // Validate a settings value with a validation function. Returns the final\n    // value of the setting or `null` if it should be ignored.\n    const validateValue = (validation, value, path) => {\n      try {\n        const newValue = validation(value, allowParse, src);\n        return newValue === undefined ? value : newValue;\n      } catch (e) {\n        console.warn(\n          `Validation of setting '${path}' (${sourceDescription}) with value '${value}' failed: `\n            + `${e}. Ignoring.`\n        );\n        return null;\n      }\n    };\n\n    // Validate a settings object/namespace. `schema` and `obj` need to be\n    // objects.\n    const validateObj = (schema, obj, path) => {\n      // We iterate through all keys of the given settings object, checking if\n      // each key is valid and recursively validating the value of that key.\n      let out = {};\n      for (const key of Object.keys(obj)) {\n        const newPath = path ? `${path}.${key}` : key;\n        if (key in schema) {\n          const value = validate(schema[key], obj[key], newPath);\n\n          // If `null` is returned, the validation failed and we ignore this\n          // value.\n          if (value !== null) {\n            out[key] = value;\n          }\n        } else {\n          console.warn(\n            `'${newPath}' (${sourceDescription}) is not a valid settings key. Ignoring.`\n          );\n        }\n      }\n\n      return out;\n    };\n\n    return validate(SCHEMA, obj, \"\");\n  }\n}\n\n\n// The values prefilled on the settings page. These settings are *not* used\n// automatically, they are just the defaults for the UI.\nconst defaultSettings = {\n  opencast: {\n    serverUrl: 'https://develop.opencast.org/',\n    loginName: 'admin',\n    loginPassword: 'opencast',\n  },\n};\n\n// Validation functions for different types.\nconst types = {\n  'string': (v, allowParse) => {\n    if (typeof v !== 'string') {\n      throw new Error(\"is not a string, but should be\");\n    }\n  },\n  'int': (v, allowParse) => {\n    if (Number.isInteger(v)) {\n      return v;\n    }\n\n    if (allowParse) {\n      if (/^[-+]?(\\d+)$/.test(v)) {\n        return Number(v);\n      }\n\n      throw new Error(\"can't be parsed as integer\");\n    } else {\n      throw new Error(\"is not an integer\");\n    }\n  },\n  'boolean': (v, allowParse) => {\n    if (typeof v === 'boolean') {\n      return;\n    }\n\n    if (allowParse) {\n      if (v === 'true') {\n        return true;\n      }\n      if (v === 'false') {\n        return false;\n      }\n      throw new Error(\"can't be parsed as boolean\");\n    } else {\n      throw new Error(\"is not a boolean\");\n    }\n  },\n  positiveInteger: (v, allowParse) => {\n    let i = types.int(v, allowParse);\n    if (i <= 0) {\n      throw new Error(\"has to be positive, but isn't\");\n    }\n\n    return i;\n  },\n  \"array\": elementType => {\n    return (v, allowParse, src) => {\n      if (typeof v === 'string' && allowParse) {\n        try {\n          v = JSON.parse(v);\n        } catch {\n          throw new Error(\"can't be parsed as array\");\n        }\n      }\n\n      if (!Array.isArray(v)) {\n        throw new Error(\"is not an array\");\n      }\n\n      return v.map(element => {\n        try {\n          const newValue = elementType(element, allowParse, src);\n          return newValue === undefined ? element : newValue;\n        } catch (err) {\n          throw new Error(`failed to validate element '${element}' of array: ${err}`);\n        }\n      });\n    };\n  },\n};\n\n// Specifies what to do with a metadata field.\nconst metaDataField = v => {\n  if (![FORM_FIELD_HIDDEN, FORM_FIELD_OPTIONAL, FORM_FIELD_REQUIRED].includes(v)) {\n    throw new Error(\n      `has to be either '${FORM_FIELD_HIDDEN}', '${FORM_FIELD_OPTIONAL}' or `\n        + `'${FORM_FIELD_REQUIRED}', but is '${v}'`\n    );\n  }\n}\n\n// A validator wrapper that errors of the source of the value is NOT\n// `settings.toml`.\nconst onlyFromServer = inner => (v, allowParse, src) => {\n  if (src !== SRC_SERVER) {\n    throw new Error(`this configuration cannot be specified via the URL or local storage, `\n      + `but must be specified in 'settings.toml'`);\n  }\n\n  return inner(v, allowParse, src);\n}\n\n// Sources that values can come from.\nconst SRC_SERVER = 'src-server';\nconst SRC_URL = 'src-url';\nconst SRC_LOCAL_STORAGE = 'src-local-storage';\n\n// Defines all potential settings and their types.\n//\n// Each setting value has to be a validation function. Such a function takes two\n// arguments: the input value `v` and the boolean `allowParse` which specifies\n// whether the input might be parsed into the correct type (this is only `true`\n// for GET parameters). The validation should throw an error if the input value\n// is not valid for the setting. If the function returns `undefined`, the input\n// value is valid and used. If the validator returns a different value, the\n// input is valid, but is replaced by that new value. See the `types` object\n// above for some examples.\nconst SCHEMA = {\n  opencast: {\n    serverUrl: v => {\n      types.string(v);\n\n      if (v === '/' || v === '') {\n        return;\n      }\n\n      const url = new URL(v);\n      if (url.protocol !== 'https:' && url.protocol !== 'http:') {\n        throw new Error('the URL does not start with \"http:\" or \"https:\"');\n      }\n\n      // TODO: we could return the `URL` here or do other adjustments\n    },\n    loginName: types.string,\n    loginPassword: types.string,\n    loginProvided: types.boolean,\n  },\n  upload: {\n    seriesId: types.string,\n    workflowId: types.string,\n    acl: (v, allowParse) => {\n      if ((allowParse && v === 'false') || v === false) {\n        return false;\n      }\n      if ((allowParse && v === 'true') || v === true) {\n        return true;\n      }\n\n      if (typeof v === 'string') {\n        return;\n      }\n\n      throw new Error(\"needs to be 'true', 'false' or a string\");\n    },\n    dcc: types.string,\n    titleField: metaDataField,\n    presenterField: metaDataField,\n  },\n  recording: {\n    videoBitrate: types.positiveInteger,\n    mimes: types.array(types.string),\n  },\n  review: {\n    disableCutting: types.boolean,\n  },\n  display: {\n    maxFps: types.positiveInteger,\n    maxHeight: types.positiveInteger,\n  },\n  camera: {\n    maxFps: types.positiveInteger,\n    maxHeight: types.positiveInteger,\n  },\n  return: {\n    allowedDomains: onlyFromServer(types.array(types.string)),\n    label: types.string,\n    target: (v, allowParse) => {\n      types.string(v, allowParse);\n      if (!(v.startsWith('/') || v.startsWith('http'))) {\n        throw new Error(`has to start with '/' or 'http'`);\n      }\n    },\n  },\n};\n\n\n// Customize array merge behavior\nlet merge = (a, b) => {\n  return deepmerge(a, b, { arrayMerge });\n};\nmerge.all = array => deepmerge.all(array, { arrayMerge })\nconst arrayMerge = (destinationArray, sourceArray, options) => sourceArray;\n\n\nconst Context = React.createContext(null);\n\n// Returns the current provided Opencast instance.\nexport const useSettings = () => React.useContext(Context);\n\nexport const Provider = ({ settingsManager, children }) => {\n  const [settings, updateSettings] = useState(settingsManager.settings());\n  settingsManager.onChange = newSettings => updateSettings(newSettings);\n\n  // This debug output will be useful for future debugging sessions.\n  useEffect(() => {\n    console.debug(\"Current settings: \", settings);\n  });\n\n  return (\n    <Context.Provider value={settings}>\n      {children}\n    </Context.Provider>\n  );\n};\n","//; -*- mode: rjsx;-*-\n/** @jsx jsx */\nimport { jsx } from 'theme-ui';\nimport React, { useEffect, useState } from 'react';\nimport equal from 'fast-deep-equal';\nimport Mustache from 'mustache';\n\nimport { recordingFileName } from './util.js';\n\n\n// The server URL was not specified.\nexport const STATE_UNCONFIGURED = 'unconfigured';\n\n// The OC server is reachable but a login was not attempted and the current user\n// is anonymous.\nexport const STATE_CONNECTED = 'connected';\n\n// The OC server is reachable and the user is authenticated.\nexport const STATE_LOGGED_IN = 'logged_in';\n\n// Some network error occured when accessing the server.\nexport const STATE_NETWORK_ERROR = 'network_error';\n\n// When accessing the OC API, the request returned as non-2xx code unexpectedly.\n// This likely indicates that the server is not actually a valid OC server.\nexport const STATE_RESPONSE_NOT_OK = 'response_not_ok';\n\n// The API requested returned invalid JSON or unexpected data.\nexport const STATE_INVALID_RESPONSE = 'invalid_response';\n\n// The server is reachable and a login was provided, but the login did not\n// succeed.\nexport const STATE_INCORRECT_LOGIN = 'incorrect_login';\n\nexport const UPLOAD_SUCCESS = 'upload_success';\nexport const UPLOAD_NETWORK_ERROR = 'upload_network_error';\nexport const UPLOAD_NOT_AUTHORIZED = 'upload_not_authorized';\nexport const UPLOAD_UNEXPECTED_RESPONSE = 'upload_unexpected_response';\nexport const UPLOAD_UNKNOWN_ERROR = 'upload_unknown_error';\n\n\nexport class Opencast {\n  #state = STATE_UNCONFIGURED;\n  #serverUrl = null;\n\n  // This can one of either:\n  // - `null`: no login is provided and login data is not specified\n  // - `true`: a login is already automatically provided from the OC context\n  // - `{ username, password }`: username and password are given\n  #login = null;\n\n  // The response of `/info/me.json` or `null` if requesting that API did not\n  // succeed.\n  #currentUser = null;\n\n  // The response from `/lti` or `null` if the request failed for some reason or\n  // if `this.#login !== true`. Note though, that this can also be the empty\n  // object, indicating that there is no LTI session.\n  #ltiSession = null;\n\n  updateGlobalOc = null;\n\n\n  constructor(settings) {\n    // If the server URL is not given, we stay in unconfigured state and\n    // immediately return.\n    if (settings?.serverUrl == null) {\n      return;\n    }\n\n    this.#serverUrl = settings.serverUrl.endsWith('/')\n      ? settings.serverUrl.slice(0, -1)\n      : settings.serverUrl;\n\n    if (settings.loginProvided === true) {\n      // Here we can assume Studio is running within an Opencast instance and\n      // the route to Studio is protected via login. This means that login\n      // cookies are already present and we don't need to worry about that.\n      this.#login = true;\n    } else if (settings.loginName && settings.loginPassword) {\n      // Studio is not running in OC context, but username and password are\n      // provided.\n      this.#login = {\n        username: settings.loginName,\n        password: settings.loginPassword,\n      };\n    } else {\n      // Login is not yet provided.\n      this.#login = null;\n    }\n  }\n\n  // Creates a new instance from the settings and calls `updateUser` on it.\n  static async init(settings) {\n    let self = new Opencast(settings);\n    await self.updateUser();\n    return self;\n  }\n\n  // Updates the global OC instance from `this` to `newInstance`.\n  setGlobalInstance(newInstance) {\n    if (!this.updateGlobalOc) {\n      console.error(\"bug: 'updateGlobalOc' not set\");\n    }\n\n    this.updateGlobalOc(newInstance);\n  }\n\n  // Refreshes the connection by requesting `info/me` unless the state is\n  // 'unconfigured'.\n  //\n  // If the request errors or returns a different user, the global Opencast\n  // instance is updated.\n  async refreshConnection() {\n    if (this.#serverUrl === null) {\n      return;\n    }\n\n    // Request to `info/me` and update if necessary.\n    const changed = await this.updateUser();\n    if (changed) {\n      this.updateGlobalOc?.(this);\n    }\n  }\n\n  // Updates `#currentUser` and `#ltiSession` by checking 'info/me.json' and\n  // `/lti` respectively.\n  //\n  // The `#state` is also updated accordingly to `STATE_LOGGED_IN`,\n  // `STATE_INCORRECT_LOGIN` or `STATE_CONNECTED` (or any error state on request\n  // error). This method returns whether the state, user object or lti object\n  // has changed in any way.\n  async updateUser() {\n    // Try to request `info/me.json` and handle potential errors.\n    let newUser;\n    try {\n      newUser = await this.getInfoMe();\n    } catch (e) {\n      // If it's not our own error, rethrow it.\n      if (!(e instanceof RequestError)) {\n        throw e;\n      }\n\n      console.error('error when getting info/me', e);\n\n      const oldState = this.#state;\n\n      // Update state, depending on kind of error.\n      if (e instanceof NetworkError) {\n        this.#state = STATE_NETWORK_ERROR;\n      } else if (e instanceof Unauthorized) {\n        this.#state = STATE_INCORRECT_LOGIN;\n      } else if (e instanceof NotOkResponse) {\n        this.#state = STATE_RESPONSE_NOT_OK;\n      } else if (e instanceof UnexpectedRedirect) {\n        // This might be too much of an assumption, but we interpret any\n        // redirect as redirect to the login page, indicating that the user is\n        // not logged in/does not have sufficient rights. Usually\n        // `/info/me.json` is available to anonymous users, so we should never\n        // get redirected. But this can be reconfigured.\n        this.#state = STATE_INCORRECT_LOGIN;\n      } else if (e instanceof InvalidJson) {\n        this.#state = STATE_INVALID_RESPONSE;\n      }\n\n      const hasChanged = this.#currentUser !== null\n        || this.ltiSession !== null\n        || oldState !== this.#state;\n      this.#currentUser = null;\n      this.#ltiSession = null;\n      return hasChanged;\n    }\n\n    const userChanged = !equal(newUser, this.#currentUser);\n    if (userChanged) {\n      this.#currentUser = newUser;\n      if (newUser?.user?.username === 'anonymous') {\n        this.#state = this.#login ? STATE_INCORRECT_LOGIN : STATE_CONNECTED;\n      } else if (newUser?.user?.username) {\n        this.#state = STATE_LOGGED_IN;\n      } else {\n        this.#state = STATE_INVALID_RESPONSE;\n      }\n    }\n\n    // Only check LTI context information if we are in an integrated situation.\n    // If the user authenticates via username/password (via HTTP basic auth),\n    // there is never an LTI session. (Well, at least the people I talked to\n    // think so).\n    if (this.#login !== true) {\n      const hasChanged = userChanged || this.#ltiSession !== null;\n      this.#ltiSession = null;\n      return hasChanged;\n    }\n\n    // Attempt to fetch LTI information and handle potential errors.\n    let newLtiSession;\n    try {\n      newLtiSession = await this.getLti();\n    } catch (e) {\n      // If it's not our own error, rethrow it.\n      if (!(e instanceof RequestError)) {\n        throw e;\n      }\n\n      console.error('Error when getting LTI info: ', e);\n\n      const oldState = this.#state;\n\n      if (e instanceof NetworkError) {\n        // Highly unlikely as the previous request suceeded.\n        this.#state = STATE_NETWORK_ERROR;\n      } else if (e instanceof Unauthorized || e instanceof UnexpectedRedirect) {\n        // It might be that the user has not access to this endpoint. In this\n        // case, there is no LTI session. We do not switch to an error state.\n      } else {\n        // In the cases of strange or invalid responses, we just ignore it for\n        // now. I don't know when that would occur. No need to switch to an\n        // error state for now.\n      }\n\n      const hasChanged = userChanged || this.#ltiSession !== null || oldState !== this.#state;\n      this.#ltiSession = null;\n      return hasChanged;\n    }\n\n    const ltiChanged = !equal(newLtiSession, this.#ltiSession);\n    this.#ltiSession = newLtiSession;\n\n    return userChanged || ltiChanged;\n  }\n\n  // Returns the response from the `/info/me.json` endpoint.\n  async getInfoMe() {\n    return await this.jsonRequest('info/me.json');\n  }\n\n  // Returns the response from the `/lti` endpoint.\n  async getLti() {\n    return await this.jsonRequest('lti');\n  }\n\n  // Sends a request to the Opencast API expecting a JSON response.\n  //\n  // On success, the parsed JSON is returned as object. If anything goes wrong,\n  // a `RequestError` is thrown and the corresponding `this.#state` is set.\n  async jsonRequest(path, options = {}) {\n    const url = `${this.#serverUrl}/${path}`;\n    const response = await this.request(path, options);\n\n    try {\n      return await response.json();\n    } catch(e) {\n      throw new InvalidJson(url, e);\n    }\n  }\n\n  // Sends a request to the Opencast API, returning the response object.\n  //\n  // If anything goes wrong, a `RequestError` is thrown and the corresponding\n  // `this.#state` is set.\n  async request(path, options = {}) {\n    const url = `${this.#serverUrl}/${path}`;\n\n    // Add HTTP Basic Auth headers if username and password are provided.\n    let headers = {};\n    if (this.#login?.username && this.#login?.password) {\n      const encoded = btoa(unescape(encodeURIComponent(\n        this.#login.username + ':' + this.#login.password\n      )));\n      headers = { 'Authorization': `Basic ${encoded}` };\n    }\n\n    let response;\n    try {\n      response = await fetch(url, {\n        ...options,\n        credentials: 'same-origin',\n        redirect: 'manual',\n        headers,\n      });\n    } catch (e) {\n      throw new NetworkError(url, e);\n    }\n\n    // Handle 401 Bad credentials for HTTP Basic Auth\n    if (response.status === 401 || response.status === 403) {\n      throw new Unauthorized(response.status, response.statusText, url);\n    }\n\n    if (response.type === 'opaqueredirect') {\n      throw new UnexpectedRedirect(url);\n    }\n\n    if (!response.ok && response.type !== 'opaqueredirect') {\n      throw new NotOkResponse(response.status, response.statusText, url);\n    }\n\n    return response;\n  }\n\n  // Uploads the given recordings with the given title and presenter metadata.\n  //\n  // If the upload was successful, `UPLOAD_SUCCESS` is returned. Otherwise:\n  // - `UPLOAD_NETWORK_ERROR` if some kind of network error occurs.\n  // - `UPLOAD_NOT_AUTHORIZED` if some error occurs that indicates the user is\n  //   not logged in or lacking rights.\n  // - `UPLOAD_UNEXPECTED_RESPONSE` if the API returned data that we didn't\n  //   expect.\n  // - `UPLOAD_UNKNOWN_ERROR` if any other error occurs.\n  //\n  // At the start of this method, `refreshConnection` is called. That\n  // potentially changed the `state`.\n  async upload({ recordings, title, presenter, start, end, uploadSettings, onProgress }) {\n    // Refresh connection and check if we are ready to upload.\n    await this.refreshConnection();\n    switch (this.#state) {\n      case STATE_LOGGED_IN:\n        break;\n      case STATE_NETWORK_ERROR:\n        return UPLOAD_NETWORK_ERROR;\n      case STATE_INCORRECT_LOGIN:\n      case STATE_CONNECTED:\n        return UPLOAD_NOT_AUTHORIZED;\n      case STATE_INVALID_RESPONSE:\n        return UPLOAD_UNEXPECTED_RESPONSE;\n      default:\n        return UPLOAD_UNKNOWN_ERROR;\n    }\n\n    // Actually upload\n    try {\n      // Create new media package\n      let mediaPackage = await this.request(\"ingest/createMediaPackage\")\n        .then(response => response.text());\n\n      // Add metadata to media package\n      mediaPackage = await this.addDcCatalog({ mediaPackage, uploadSettings, title, presenter });\n\n      // Set appropriate ACL unless the configuration says no.\n      if (uploadSettings?.acl !== false) {\n        mediaPackage = await this.attachAcl({ mediaPackage, uploadSettings });\n      }\n\n      // Add all recordings (this is the actual upload).\n      mediaPackage = await this.uploadTracks(\n        { mediaPackage, recordings, onProgress, title, presenter }\n      );\n\n      if (start != null || end != null) {\n        mediaPackage = await this.addCuttingInformation({\n          mediaPackage,\n          // We set the defaults here, instead of in the state,\n          // so that we don't even have to send a SMIL catalog,\n          // when the user didn't cut at all.\n          start: start || 0,\n          end: end || Number.MAX_VALUE,\n        });\n      }\n\n      // Finalize/ingest media package\n      await this.finishIngest({ mediaPackage, uploadSettings });\n\n      return UPLOAD_SUCCESS;\n    } catch(e) {\n      // Any error not thrown by us is rethrown.\n      if (!(e instanceof RequestError)) {\n        throw e;\n      }\n\n      console.error(\"Error occured during upload: \", e);\n\n      if (e instanceof NetworkError) {\n        return UPLOAD_NETWORK_ERROR;\n      } else if (e instanceof UnexpectedRedirect || e instanceof Unauthorized) {\n        // Again, we boldly assume that any redirect is a redirect to the login\n        // page. This might be wrong, but until someone has a problem, this is\n        // the sanest option IMO. A well-designed API shouldn't redirect in\n        // those cases, of course. But we are not dealing with such an API here.\n        return UPLOAD_NOT_AUTHORIZED;\n      } else if (e instanceof NotOkResponse) {\n        return UPLOAD_UNEXPECTED_RESPONSE;\n      } else {\n        return UPLOAD_UNKNOWN_ERROR;\n      }\n    }\n  }\n\n  // Adds the DC Catalog with the given metadata to the current ingest process\n  // via `ingest/addDCCatalog`. Do not call this method outside of `upload`!\n  async addDcCatalog({ mediaPackage, title, presenter, uploadSettings }) {\n    const seriesId = uploadSettings?.seriesId;\n    const template = uploadSettings?.dcc || DEFAULT_DCC_TEMPLATE;\n    const dcc = this.constructDcc(template, { presenter, title, seriesId });\n\n    const body = new FormData();\n    body.append('mediaPackage', mediaPackage);\n    body.append('dublinCore', encodeURIComponent(dcc));\n    body.append('flavor', 'dublincore/episode');\n\n    return await this.request(\"ingest/addDCCatalog\", { method: 'post', body })\n      .then(response => response.text());\n  }\n\n  // Adds the ACL to the current ingest process via `ingest/addAttachment`. Do\n  // not call this method outside of `upload`!\n  async attachAcl({ mediaPackage, uploadSettings }) {\n    const template = uploadSettings?.acl === true || (!uploadSettings?.acl)\n      ? DEFAULT_ACL_TEMPLATE\n      : uploadSettings?.acl;\n    const acl = this.constructAcl(template);\n\n    const body = new FormData();\n    body.append('flavor', 'security/xacml+episode');\n    body.append('mediaPackage', mediaPackage);\n    body.append('BODY', new Blob([acl]), 'acl.xml');\n\n    return await this.request(\"ingest/addAttachment\", { method: 'post', body: body })\n      .then(response => response.text());\n  }\n\n  // Adds a SMIL catalog for Opencast to cut the video during processing\n  addCuttingInformation({ mediaPackage, start, end }) {\n    const body = new FormData();\n    body.append('flavor', 'smil/cutting');\n    body.append('mediaPackage', mediaPackage);\n    body.append('BODY', new Blob([smil({ start, end })]), 'cutting.smil');\n    return this.request(\"ingest/addCatalog\", { method: 'post', body })\n      .then(response => response.text());\n  }\n\n  // Uploads the given recordings to the current ingest process via\n  // `ingest/addTrack`. Do not call this method outside of `upload`!\n  async uploadTracks({ mediaPackage, recordings, onProgress, title, presenter }) {\n    const totalBytes = recordings.map(r => r.media.size).reduce((a, b) => a + b, 0);\n    let finishedTracksBytes = 0;\n\n    for (const { deviceType, media, mimeType } of recordings) {\n      const finishedBytes = finishedTracksBytes;\n      let trackFlavor = 'presentation/source';\n      if (deviceType === 'desktop') {\n        trackFlavor = 'presentation/source';\n      } else if (deviceType === 'video') {\n        trackFlavor = 'presenter/source';\n      }\n\n      const flavor = deviceType === 'desktop' ? 'presentation' : 'presenter';\n      const downloadName = recordingFileName({ mimeType, flavor, title, presenter });\n\n      const body = new FormData();\n      body.append('mediaPackage', mediaPackage);\n      body.append('flavor', trackFlavor);\n      body.append('tags', '');\n      body.append('BODY', media, downloadName);\n\n      // We have to upload with XHR here, as `fetch` does not currently offer a\n      // way to get the upload progress. Meh.\n      const url = `${this.#serverUrl}/ingest/addTrack`;\n      mediaPackage = await new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.open('POST', url);\n\n        // Add HTTP Basic Auth headers if username and password are provided.\n        if (this.#login?.username && this.#login?.password) {\n          const encoded = btoa(unescape(encodeURIComponent(\n            this.#login.username + ':' + this.#login.password\n          )));\n          xhr.setRequestHeader('Authorization', `Basic ${encoded}`);\n        }\n\n        xhr.onload = e => resolve(e.target.responseText);\n        xhr.onerror = () => {\n          // Handle 401 Bad credentials for HTTP Basic Auth\n          if (xhr.status === 401 || xhr.status === 403) {\n            reject(new Unauthorized(xhr.status, xhr.statusText, url));\n          } else {\n            reject(new NotOkResponse(xhr.status, xhr.statusText, url));\n          }\n        };\n        xhr.upload.onprogress = e => {\n          if (onProgress) {\n            const totalLoaded = e.loaded + finishedBytes;\n            onProgress(totalLoaded / totalBytes);\n          }\n        };\n\n        try {\n          xhr.send(body);\n        } catch (e) {\n          reject(new NetworkError(url, e));\n        }\n      });\n\n      finishedTracksBytes += media.size;\n    }\n\n    return mediaPackage;\n  }\n\n  // Finishes the current ingest process via `ingest/ingest`. Do not call this\n  // method outside of `upload`!\n  async finishIngest({ mediaPackage, uploadSettings }) {\n    const workflowId = uploadSettings?.workflowId;\n\n    const body = new FormData();\n    body.append('mediaPackage', mediaPackage);\n    if (workflowId) {\n      body.append('workflowDefinitionId', workflowId);\n    }\n    await this.request(\"ingest/ingest\", { method: 'post', body: body });\n  }\n\n  // Returns the current state of the connection to the OC server.\n  getState() {\n    return this.#state;\n  }\n\n  // Returns whether or not a login is already provided (i.e. we don't need to\n  // login manually).\n  isLoginProvided() {\n    return this.#login === true;\n  }\n\n  // Returns whether or not the connection is ready to upload a video.\n  isReadyToUpload() {\n    return this.#state === STATE_LOGGED_IN;\n  }\n\n  // Returns the server URL in a form suitable to present to the user. Returns\n  // `null` if the server URL is not configured yet or if it is the same\n  // hostname as the one studio is running on.\n  prettyServerUrl() {\n    const url = this.#serverUrl;\n\n    return url && url.startsWith(\"https\")\n      ? new URL(url).hostname\n      : null;\n  }\n\n  // Constructs the ACL XML structure from the given template string.\n  constructAcl(template) {\n    if (!this.#currentUser) {\n      // Internal error: this should not happen.\n      throw new Error(`'currentUser' is '${this.#currentUser}' in 'constructAcl'`);\n    }\n\n    // Prepare template \"view\": the values that can be used within the template.\n    const view = {\n      user: this.#currentUser,\n      lti: this.#ltiSession,\n      roleOAuthUser: this.#currentUser.roles.find(r => r === 'ROLE_OAUTH_USER'),\n    };\n\n    return renderTemplate(template, view);\n  }\n\n  constructDcc(template, { title, presenter, seriesId }) {\n    // Prepare template \"view\": the values that can be used within the template.\n    const view = {\n      user: this.#currentUser,\n      lti: this.#ltiSession,\n      title,\n      presenter,\n      seriesId,\n      now: new Date().toISOString(),\n    };\n\n    return renderTemplate(template, view);\n  }\n}\n\n\n// ===== Errors that can occur when accessing the Opencast API =====\n\n// Base error\nclass RequestError extends Error {}\n\n// The fetch itself failed. This unfortunately can have many causes, including\n// blocked by browser, CORS, server not available, device offline, ...\nclass NetworkError extends RequestError {\n  constructor(url, cause) {\n    super(`network error when accessing '${url}': ${cause}`);\n  }\n}\n\n// When requesting a JSON API but the response body is not valid JSON.\nclass InvalidJson extends RequestError {\n  constructor(url, cause) {\n    super(`invalid JSON when accessing ${url}: ${cause}`);\n  }\n}\n\n// When the request returns 401.\nclass Unauthorized extends RequestError {\n  constructor(status, statusText, url) {\n    super(`got ${status} ${statusText} when accessing ${url}`);\n  }\n}\n\n// When the request returns a non-2xx status code.\nclass NotOkResponse extends RequestError {\n  constructor(status, statusText, url) {\n    super(`unexpected ${status} ${statusText} response when accessing ${url}`);\n  }\n}\n\nclass UnexpectedRedirect extends RequestError {\n  constructor(url) {\n    super(`unexpected redirect when accessing ${url}`);\n  }\n}\n\n\n// ===== The Opencast context and `useOpencast` =====\n\nconst Context = React.createContext(null);\n\n// Returns the current provided Opencast instance.\nexport const useOpencast = () => React.useContext(Context);\n\nexport const Provider = ({ initial, children }) => {\n  const [, updateDummy] = useState(0);\n  const [opencast, updateOpencast] = useState(initial);\n  opencast.updateGlobalOc = (newInstance) => {\n    updateOpencast(newInstance);\n\n    // If the object reference didn't change, we use this dummy state to force a\n    // rerender.\n    if (opencast === newInstance) {\n      updateDummy(old => old + 1);\n    }\n  };\n\n  // This debug output will be useful for future debugging sessions.\n  useEffect(() => {\n    console.debug(\"Current Opencast connection: \", opencast);\n\n    // To avoid problems of session timeouts, we request `info/me` every 5\n    // minutes. The additional server load should be negligible, it won't\n    // notably stress the user's internet connection and is below almost all\n    // sensible timeouts.\n    const interval = setInterval(() => opencast.refreshConnection(), 5 * 60 * 1000);\n\n    return () => clearInterval(interval);\n  });\n\n  return (\n    <Context.Provider value={opencast}>\n      {children}\n    </Context.Provider>\n  );\n};\n\n\n// ===== Stuff related to upload metadata =====\n\nconst escapeString = s => new XMLSerializer().serializeToString(new Text(s));\n\nconst renderTemplate = (template, view) => {\n  const originalEscape = Mustache.escape;\n  Mustache.escape = escapeString;\n  const out = Mustache.render(template, view);\n  Mustache.escape = originalEscape;\n  return out;\n}\n\nconst DEFAULT_DCC_TEMPLATE = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<dublincore xmlns=\"http://www.opencastproject.org/xsd/1.0/dublincore/\"\n            xmlns:dcterms=\"http://purl.org/dc/terms/\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <dcterms:created xsi:type=\"dcterms:W3CDTF\">{{ now }}</dcterms:created>\n    <dcterms:title>{{ title }}</dcterms:title>\n    {{ #presenter }}<dcterms:creator>{{ presenter }}</dcterms:creator>{{ /presenter }}\n    {{ #seriesId }}<dcterms:isPartOf>{{ seriesId }}</dcterms:isPartOf>{{ /seriesId }}\n    <dcterms:extent xsi:type=\"dcterms:ISO8601\">PT5.568S</dcterms:extent>\n    <dcterms:spatial>Opencast Studio</dcterms:spatial>\n</dublincore>\n`;\n\nconst DEFAULT_ACL_TEMPLATE = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<Policy PolicyId=\"mediapackage-1\"\n  RuleCombiningAlgId=\"urn:oasis:names:tc:xacml:1.0:rule-combining-algorithm:permit-overrides\"\n  Version=\"2.0\"\n  xmlns=\"urn:oasis:names:tc:xacml:2.0:policy:schema:os\">\n  <Rule RuleId=\"user_read_Permit\" Effect=\"Permit\">\n    <Target>\n      <Actions>\n        <Action>\n          <ActionMatch MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\">\n            <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">read</AttributeValue>\n            <ActionAttributeDesignator AttributeId=\"urn:oasis:names:tc:xacml:1.0:action:action-id\"\n              DataType=\"http://www.w3.org/2001/XMLSchema#string\"/>\n          </ActionMatch>\n        </Action>\n      </Actions>\n    </Target>\n    <Condition>\n      <Apply FunctionId=\"urn:oasis:names:tc:xacml:1.0:function:string-is-in\">\n        <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">{{ user.userRole }}</AttributeValue>\n        <SubjectAttributeDesignator AttributeId=\"urn:oasis:names:tc:xacml:2.0:subject:role\"\n          DataType=\"http://www.w3.org/2001/XMLSchema#string\"/>\n      </Apply>\n    </Condition>\n  </Rule>\n  <Rule RuleId=\"user_write_Permit\" Effect=\"Permit\">\n    <Target>\n      <Actions>\n        <Action>\n          <ActionMatch MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\">\n            <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">write</AttributeValue>\n            <ActionAttributeDesignator AttributeId=\"urn:oasis:names:tc:xacml:1.0:action:action-id\"\n              DataType=\"http://www.w3.org/2001/XMLSchema#string\"/>\n          </ActionMatch>\n        </Action>\n      </Actions>\n    </Target>\n    <Condition>\n      <Apply FunctionId=\"urn:oasis:names:tc:xacml:1.0:function:string-is-in\">\n        <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">{{ user.userRole }}</AttributeValue>\n        <SubjectAttributeDesignator AttributeId=\"urn:oasis:names:tc:xacml:2.0:subject:role\"\n          DataType=\"http://www.w3.org/2001/XMLSchema#string\"/>\n      </Apply>\n    </Condition>\n  </Rule>\n</Policy>\n`;\n\nconst smil = ({ start, end }) => `\n  <smil xmlns=\"http://www.w3.org/ns/SMIL\">\n    <body>\n      <par>\n        <video clipBegin=\"${start}s\" clipEnd=\"${end}s\" />\n      </par>\n    </body>\n  </smil>\n`;\n","import css from '@emotion/css/macro'\n\nconst GlobalStyle = css`\n* {\n  box-sizing: border-box;\n}\n\nhtml, body, button, input {\n  font-family: Ubuntu, Roboto, \"Open Sans\", \"Segoe UI\", \"Helvetica Neue\", Verdana, sans-serif;\n}\n\nbody {\n  overflow-x: auto;\n}\n\nlabel, button:not(:disabled) {\n  cursor: pointer;\n}\n\nbutton {\n  outline: none;\n}\n\n#root {\n  /* Of the most common mobile phones, the smallest viewport width is\n     320 (iPhone 5). */\n  min-width: 320px;\n  overflow-x: hidden;\n  height: 100%;\n}\n\n@keyframes pulse {\n  from { opacity: 0.85 }\n  50% { opacity: 0.6 }\n  to { opacity: 0.85 }\n}\n`;\n\nexport default GlobalStyle;\n","import { darken } from '@theme-ui/color';\n\nconst heading = {\n  color: 'text',\n  fontFamily: 'heading',\n  lineHeight: 'heading',\n  fontWeight: 'heading'\n};\n\nconst baseButton = {\n  fontSize: 2,\n  '& svg': {\n    mr: 2\n  },\n  '&:disabled': {\n    bg: 'background',\n    borderColor: 'gray.2',\n    borderWidth: 1,\n    borderStyle: 'solid',\n    color: 'text',\n    cursor: 'not-allowed',\n    opacity: 0.5\n  }\n};\n\nconst base = {\n  breakpoints: ['576px', '768px', '992px', '1200px'],\n  space: [0, 4, 8, 16, 32, 64, 128, 256, 512],\n  fonts: {\n    body: 'Roboto, \"Open Sans\", \"Segoe UI\", \"Helvetica Neue\", Verdana, system-ui, sans-serif',\n    heading: 'Roboto, \"Open Sans\", \"Segoe UI\", \"Helvetica Neue\", Verdana, system-ui, sans-serif',\n    monospace: '\"Roboto Mono\", monospace'\n  },\n  fontSizes: [12, 14, 16, 20, 24, 32, 48, 64, 96],\n  fontWeights: {\n    body: 300,\n    heading: 600,\n    bold: 700,\n  },\n  lineHeights: {\n    body: 1.5,\n    heading: 1.125\n  },\n  heights: {\n    headerHeight: '3em'\n  },\n  colors: {\n    text: '#000',\n    background: '#fff',\n    primary: '#47af7a',\n    secondary: '#30c',\n    muted: '#888888',\n    highlight: '#3498db',\n    error: '#f14668',\n    gray: ['#363636', '#666666', '#aaaaaa', '#dddddd', '#f5f5f5'],\n    videoOverlay: 'rgba(255, 255, 255, 0.2)'\n  },\n  text: {\n    text: {\n      fontWeight: 'body',\n      fontSize: '18px',\n    },\n    heading: {\n      fontWeight: 'heading',\n      fontSize: '18px',\n    },\n  },\n  buttons: {\n    primary: {\n      ...baseButton,\n      bg: 'primary',\n      color: 'background',\n      '&:not(:disabled):hover': {\n        bg: darken('primary', 0.03)\n      },\n      '&:disabled': {\n        bg: 'gray.1'\n      },\n    },\n    danger: {\n      ...baseButton,\n      bg: 'error',\n      color: 'background',\n      '&:not(:disabled):hover': {\n        bg: darken('error', 0.03)\n      }\n    },\n    text: {\n      ...baseButton,\n      bg: 'background',\n      color: 'text',\n      border: theme => `1px solid ${theme.colors.gray[1]}`,\n      '&:not(:disabled):hover': {\n        bg: 'gray.3'\n      }\n    }\n  },\n  cards: {\n    primary: {\n      bg: 'background',\n      boxShadow: '0 0.5em 1em -0.125em rgba(10, 10, 10, 0.1), 0 0px 0 1px rgba(10, 10, 10, 0.02)',\n      color: 'text',\n      maxWidth: '100%',\n      position: 'relative'\n    }\n  },\n  styles: {\n    root: {\n      fontFamily: 'body',\n      lineHeight: 'body',\n      fontWeight: 'body'\n    },\n    h1: {\n      ...heading,\n      mt: 0,\n      mb: 3,\n      fontSize: 5,\n    },\n    h2: {\n      ...heading,\n      fontSize: 4\n    },\n    h3: {\n      ...heading,\n      fontSize: 3\n    },\n    h4: {\n      ...heading,\n      fontSize: 2\n    },\n    h5: {\n      ...heading,\n      fontSize: 1\n    },\n    h6: {\n      ...heading,\n      fontSize: 0\n    },\n    p: {\n      color: 'text',\n      fontFamily: 'body',\n      fontWeight: 'body',\n      lineHeight: 'body'\n    },\n    a: {\n      color: 'primary'\n    },\n    pre: {\n      fontFamily: 'monospace',\n      overflowX: 'auto',\n      code: {\n        color: 'inherit'\n      }\n    },\n    code: {\n      fontFamily: 'monospace',\n      fontSize: 'inherit'\n    },\n    table: {\n      width: '100%',\n      borderCollapse: 'separate',\n      borderSpacing: 0\n    },\n    th: {\n      textAlign: 'left',\n      borderBottomStyle: 'solid'\n    },\n    td: {\n      textAlign: 'left',\n      borderBottomStyle: 'solid'\n    },\n    img: {\n      maxWidth: '100%'\n    },\n    input: {\n      borderWidth: 1,\n      borderStyle: 'solid',\n      borderColor: 'gray.2',\n      height: '2rem',\n      fontSize: '14pt',\n      borderRadius: 2,\n      px: 2,\n      py: 0,\n      outline: 'none',\n      transition: 'border-color 0.3s, box-shadow 0.3s',\n      width: '100%',\n      '&:focus': {\n        borderColor: 'primary',\n        boxShadow: theme => `0 0 3px 0 ${theme.colors.primary}`\n      },\n      '&[aria-invalid=\"true\"]': {\n        borderColor: 'error',\n        boxShadow: theme => `0 0 3px 0 ${theme.colors.error}`\n      }\n    },\n    select: {\n      height: '2rem',\n      fontSize: '14pt',\n      outline: 'none',\n      transition: 'border-color 0.3s, box-shadow 0.3s',\n      width: '100%',\n      '&:focus': {\n        borderColor: 'primary',\n        boxShadow: theme => `0 0 3px 0 ${theme.colors.primary}`\n      }\n    },\n    progress: {\n      bg: '#ebebeb',\n      color: '#4ab57f',\n      height: '8px',\n    }\n  },\n  container: {\n    mx: 'auto',\n    p: 3,\n    maxWidth: ['none', 'none', 960, 1152, 1344]\n  }\n};\n\nexport default base;\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nimport enTranslations from './locales/en.json';\nimport deTranslations from './locales/de.json';\nimport elTranslations from './locales/el.json';\nimport esTranslations from './locales/es.json';\nimport faTranslations from './locales/fa.json';\nimport frTranslations from './locales/fr.json';\nimport nlTranslations from './locales/nl.json';\nimport slTranslations from './locales/sl.json';\nimport trTranslations from './locales/tr.json';\n\nconst resources = {\n  en: { translation: enTranslations },\n  de: { translation: deTranslations },\n  el: { translation: elTranslations },\n  es: { translation: esTranslations },\n  fa: { translation: faTranslations },\n  fr: { translation: frTranslations },\n  nl: { translation: nlTranslations },\n  sl: { translation: slTranslations },\n  tr: { translation: trTranslations },\n};\n\ni18n\n  .use(initReactI18next)\n  .use(LanguageDetector)\n  .init({\n    resources,\n    fallbackLng: 'en',\n\n    keySeparator: false,\n\n    interpolation: {\n      escapeValue: false,\n      format: (value, format, lng) => {\n        switch (format) {\n        case 'duration-seconds':\n          if (value == null) {\n            return '-:--:--';\n          }\n\n          const seconds = value % 60;\n          value /= 60;\n          const minutes = Math.floor(value % 60);\n          value /= 60;\n          const hours = Math.floor(value % 60);\n\n          const secondsString = seconds.toLocaleString(lng, {\n            minimumFractionDigits: 1,\n            maximumFractionDigits: 1,\n          });\n          let result = [\n            (minutes < 10 ? '0' : '') + minutes,\n            (seconds < 10 ? '0' : '') + secondsString,\n          ];\n          if (hours) {\n            result.unshift(hours);\n          }\n\n          return result.join(':');\n        default:\n          return value;\n        }\n      },\n    },\n\n    detection: {\n      order: ['localStorage', 'navigator'],\n    },\n  });\n\nexport default i18n;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//; -*- mode: rjsx;-*-\n/** @jsx jsx */\nimport { jsx, ThemeProvider } from 'theme-ui';\n\nimport { Global } from '@emotion/core';\nimport * as Sentry from '@sentry/browser';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GlobalStyle from './style/global-style';\nimport theme from './theme';\n\nimport './i18n';\nimport * as serviceWorker from './serviceWorker';\nimport { SettingsManager, Provider as SettingsProvider } from './settings';\nimport { Opencast, Provider as OpencastProvider } from './opencast';\nimport { userHasWebcam, sleep } from './util';\n\nif (process.env.REACT_APP_ENABLE_SENTRY === '1') {\n  Sentry.init({\n    dsn: 'https://66e6b4dc3d59463fa34272abcb5da6b1@sentry.virtuos.uos.de/4',\n    release: `oc-studio-${process.env.REACT_APP_GIT_SHA}`,\n  });\n}\n\n// Load the rest of the application and try to fetch the settings file from the\n// server.\nconst initialize = Promise.all([\n  // Load rest of the application code\n  import('./App').then(mod => mod.default),\n\n  // Check for camera devices\n  userHasWebcam(),\n\n  // Load the settings and initialize Opencast\n  SettingsManager.init().then(async settingsManager => {\n\n    // We wait for at most 300ms for `updateUser` to return. In the vast\n    // majority of cases, it should be done long before that timeout. We just\n    // don't want to stall the loading of the app forever if the user is on slow\n    // internet. The information is not actually needed for anything important\n    // in the beginning. It's mostly for debugging at this point.\n    const oc = new Opencast(settingsManager.settings().opencast);\n    await Promise.race([\n      oc.refreshConnection(),\n      sleep(300),\n    ]);\n\n    return [settingsManager, oc];\n  }),\n]);\n\nconst render = body => {\n  ReactDOM.render(body, document.getElementById('root'));\n};\n\n// After the initialization is done, render to the root element.\ninitialize.then(\n  ([App, userHasWebcam, [settingsManager, opencast]]) => {\n    render(\n      <React.StrictMode>\n        <ThemeProvider theme={theme}>\n          <Global styles={GlobalStyle} />\n          <OpencastProvider initial={opencast}>\n            <SettingsProvider settingsManager={settingsManager}>\n              <App settingsManager={settingsManager} userHasWebcam={userHasWebcam} />\n            </SettingsProvider>\n          </OpencastProvider>\n        </ThemeProvider>\n      </React.StrictMode>\n     );\n  },\n\n  // This error case is vey unlikely to occur.\n  e => render(<p>\n    {`Fatal error while loading app: ${e.message}`}\n    <br />\n    This might be caused by a incorrect configuration by the system administrator.\n  </p>),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}